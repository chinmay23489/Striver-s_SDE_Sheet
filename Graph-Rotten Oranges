bool isSafe(int x,int y,vector<vector<int>>&grid,vector<vector<int>>&visited,int n,int m)
    {
        if(x>=0 && y>=0 && x<n && y<m && grid[x][y]==1 && !visited[x][y]){
            return 1;
        }
        return 0;
    }
    
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        
        queue<pair<pair<int,int>,int>>q;
        vector<vector<int>>visited(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2){
                    q.push({{i,j},1});
                }
            }
        }
        int maxi=0;
        int ans=0;
        
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            
            int x=it.first.first;
            int y=it.first.second;
            int time=it.second;
            
            int dx[4]={1,0,-1,0};
            int dy[4]={0,1,0,-1};
            
            for(int i=0;i<4;i++)
            {
                int newx=x+dx[i];
                int newy=y+dy[i];
                
                if(isSafe(newx,newy,grid,visited,n,m))
                {
                    visited[newx][newy]=1;
                    grid[newx][newy]=2;
                    q.push({{newx,newy},time+1});
                    ans=time;
                    maxi=max(maxi,ans);
                }
            }
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        return maxi;
        
    }
