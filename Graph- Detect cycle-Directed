//using dfs 

bool dfs(int node,int visited[],int pathVisited[],vector<int>adj[])
    {
        visited[node]=1;
        pathVisited[node]=1;
        
        for(auto i:adj[node])
        {
            if(!visited[i])
            {
                if(dfs(i,visited,pathVisited,adj)){
                    return true;
                }
            }
            else if(visited[i] && pathVisited[i])
            {
                return true;
            }
        }
        
        pathVisited[node]=0;
        return false;
    }
    
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        int visited[V]={0};
        int pathVisited[V]={0};
        
        for(int i=0;i<V;i++)
        {
            if(!visited[i]){
                if(dfs(i,visited,pathVisited,adj)){
                    return true;
                }
            }
        }
        return false;
    }

//using kahn's alogorithm

vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    int inorder[V]={0};
	    for(int i=0;i<V;i++)
	    {
	        for(auto it:adj[i])
	        {
	            inorder[it]++;
	        }
	    }
	    vector<int>topo;
	    queue<int>q;
	    for(int i=0;i<V;i++)
	    {
	        if(inorder[i]==0){
	            q.push(i);
	        }
	    }
	    
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        topo.push_back(node);
	        
	        for(auto i:adj[node])
	        {
	            inorder[i]--;
	            if(inorder[i]==0){
	                q.push(i);
	            }
	        }
	    }
	    
	    if(topt.size()!=V){
return false;
	}
return true;
