// Using BFS //

bool detectcycle(int src,vector<int> adj[],vector<int>&visited)
    {
        visited[src]=1;
        queue<pair<int,int>>q;
        q.push({src,-1});
        
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            int node=it.first;
            int parent=it.second;
            
            for(auto i:adj[node])
            {
                if(!visited[i])
                {
                    visited[i]=1;
                    q.push({i,node});
                }
                else if(parent !=i)
                {
                    return 1;
                }
            }
        }
        return 0;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>visited(V,0);
        //check for connected graph
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                if(detectcycle(i,adj,visited)){
                    return 1;
                }
            }
        }
        return 0;
        
    }

//using dfs//
bool dfs(int node,int parent,vector<int>adj[],vector<int>&visited)
    {
        visited[node]=1;
        for(auto i:adj[node])
        {
            if(!visited[i]){
                if(dfs(i,node,adj,visited)){
                    return 1;
                }
                
            }
            else if(parent!=i){
                    return 1;
                }
        }
        return 0;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>visited(V,0);
        
        //check for multiple components of graph
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                if(dfs(i,-1,adj,visited)){
                    return 1;
                }
            }
            
        }
        return 0;
        
    }
