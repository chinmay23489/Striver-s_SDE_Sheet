//dfs
bool dfs(int node,int col,int color[],vector<int>adj[])
    {
        color[node]=col;
        for(auto i:adj[node])
        {
            if(color[i]==-1){
                if(dfs(i,!col,color,adj)==false){
                    return false;
                }
            }
            else if(color[i]==color[node]){
                return false;
            }
        }
        return true;
    }

	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    int color[V];
	    for(int i=0;i<V;i++){
	        color[i]=-1;
	    }
	    for(int i=0;i<V;i++)
	    {
	        if(color[i]==-1){
	            if(dfs(i,0,color,adj)==false){
	                return false;
	            }
	        }
	    }
	    return true;
	}

//using bfs
class Solution {
public:
    bool detectcycle(int src,int color[],vector<int>adj[])
    {
        queue<int>q;
	    q.push(src);
	    color[src]=0;
	    
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        
	        for(auto i:adj[node])
	        {
	            if(color[i]==-1)
	            {
	                color[i]=!color[node];
	                q.push(i);
	            }
	            else if(color[i]==color[node])
	            {
	                return false;
	            }
	        }
	    }
	    return true;
    }

	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    int color[V];
	    for(int i=0;i<V;i++) color[i]=-1;
	    
	    for(int i=0;i<V;i++)
	    {
	        if(color[i]==-1)
	        {
	            if(detectcycle(i,color,adj)==false){
	                return false;
	            }
	        }
	    }
	    return true;
	}

};
