//using dfs

void dfs(int node,vector<int>adj[],stack<int>&s,int visited[])
	{
	    visited[node]=1;
	    for(auto i:adj[node])
	    {
	        if(!visited[i])
	        {
	            dfs(i,adj,s,visited);
	        }
	    }
	    s.push(node);
	}
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int>topo;
	    stack<int>s;
	    int visited[V]={0};
	    for(int i=0;i<V;i++)
	    {
	        if(!visited[i])
	        {
	            dfs(i,adj,s,visited);
	        }
	    }
	    
	    while(!s.empty())
	    {
	        topo.push_back(s.top());
	        s.pop();
	    }
	    return topo;
	}

//using BFS (Kahn's Algorithm)

vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    int inorder[V]={0};
	    for(int i=0;i<V;i++)
	    {
	        for(auto it:adj[i])
	        {
	            inorder[it]++;
	        }
	    }
	    vector<int>topo;
	    queue<int>q;
	    for(int i=0;i<V;i++)
	    {
	        if(inorder[i]==0){
	            q.push(i);
	        }
	    }
	    
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        topo.push_back(node);
	        
	        for(auto i:adj[node])
	        {
	            inorder[i]--;
	            if(inorder[i]==0){
	                q.push(i);
	            }
	        }
	    }
	    
	    return topo;
	}
