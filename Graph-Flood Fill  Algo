bool isSafe(int x, int y, int n, int m, vector<vector<int>>& image, vector<vector<int>>& visited, int color, int newColor) {
    if (x >= 0 && x < n && y >= 0 && y < m && image[x][y] == color && !visited[x][y] && image[x][y] != newColor) {
        return true;
    }
    return false;
}

void dfs(int x, int y, vector<vector<int>>& image, vector<vector<int>>& visited, int n, int m, int color, int newColor, int dx[], int dy[])
{
    visited[x][y] = 1;
    image[x][y] = newColor;

    for (int i = 0; i < 4; i++) {
        int newx = x + dx[i];
        int newy = y + dy[i];

        if (isSafe(newx, newy, n, m, image, visited, color, newColor)) {
            dfs(newx, newy, image, visited, n, m, color, newColor, dx, dy);
        }
    }
}

vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor)
{
    int color = image[sr][sc];
    int n = image.size();
    int m = image[0].size();

    vector<vector<int>> visited(n, vector<int>(m, 0));
    visited[sr][sc] = 1; // Mark the starting pixel as visited

    int dx[4] = { 1, 0, -1, 0 };
    int dy[4] = { 0, 1, 0, -1 };

    dfs(sr, sc, image, visited, n, m, color, newColor, dx, dy);

    return image;
}
