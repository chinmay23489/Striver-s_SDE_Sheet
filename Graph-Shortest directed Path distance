//using dfs algo

void toposort(int node,stack<int>&s,int visited[],vector<pair<int,int>>adjList[])
     {
        visited[node]=1;
        for(auto i:adjList[node])
        {
            if(!visited[i.first])
            {
                toposort(i.first,s,visited,adjList);
            }
        }
        s.push(node);
     }
  
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>>adjList[N];
        for(int i=0;i<M;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            
            adjList[u].push_back({v,wt});
        }
        
        //finding topo sort using dfs algorithm
        
        int visited[N]={0};
        stack<int>s;
        for(int i=0;i<N;i++)
        {
            if(!visited[i])
            {
                toposort(i,s,visited,adjList);
            }
        }
        
        //step2-> finding minimum distance from source node by taking the values out one by one from the stack 
    
        vector<int>dist(N);
        for(int i=0;i<N;i++)
        {
            dist[i]=1e9;
        }
        dist[0]=0;
        while(!s.empty())
        {
            int node= s.top();
            s.pop();
            
            for(auto i:adjList[node])
            {
                int v=i.first;
                int wt=i.second;
                
                if(dist[node]+wt <dist[v])
                {
                    dist[v]=dist[node]+wt;
                }
            }
        }
        for(int i=0;i<N;i++)
        {
            if(dist[i]==1e9){
                dist[i]=-1;
            }
        }
        return dist;
     }
